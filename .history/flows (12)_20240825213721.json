[{"id":"a6398238.dbb24","type":"tab","label":"Astronomy flux","disabled":false,"info":""},{"id":"fa64c4d43da69405","type":"group","z":"a6398238.dbb24","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["e757b049.aa745","9b520682.5cbbe8","317f7a8.2b1ed86","file","c91743dc40187954","f4319015.f829c","b8d5a5ee.27a048","13717224.4e8bfe","ba14283e.921b28","1adc9f30cd79624c","switch_node","json_node","6abbf520d9268c41","10dbcc2faf87dbb8","9fa4c351263be4aa","e27128bec86720d2","ecd82f95ac87f924","3b2c1423ea4039cc","a121e87126cce329","0364acf45d5e0ce9","574649e5db73966c","d92a85a5d1200b50","c90f11e073f10b5a","440a858da18af230","275370b37f3e4d5f","cd7bbc8133e2800e","ac1ff67a26678ad8","2d6f2558d4fc7e25","0527a6c8f6dd719c","0cb93ad635811017","57aceb58e76bef05","f072473a64f0a589","fb10468dd878168c","4dbc420358c193ab","6d5ac73a066a1311","f015157c3da66b11","25ecd73f7ed2eb47","24a721c0b9ad9c4e","dba85612309bd765","676cd6086c0ec32c","2a6ed4dce77c11f0","331a7b912191aefe","4bb27edef8bfecf6","7258a8ce405742b3","35c1a417b81a3c9b","7dd25af803822f0e","82d967bc285fd17e","a464eb4b212cbc0d","43cc2c8acbf9616a","7937a081cd1da2c4","35a8db32a1c13f06","58fb5439de28fabd","433ba7226d352be4","2f6a97785708f602","cfa95ff79a094e3e","5ea9a3129c24da52","2e3b885be183bec8","ab05f5b269b63239","55abb6e4f593e0c3","f22ac935192c7c97","25bf1ea2489cf7a9","7e2d05ab647b6cf5","7bfa105943501ace","96ae28d2bbb5458e","87a2703df8ac6572"],"x":14,"y":19,"w":1532,"h":1342},{"id":"e757b049.aa745","type":"debug","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"debug-solar_system_planets.log","active":false,"tosidebar":true,"console":true,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":1360,"y":260,"wires":[]},{"id":"9b520682.5cbbe8","type":"pythonshell in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"solar_system_planets","pyfile":"/data/astronomy/scripts/solar_system_planets.py","virtualenv":"/data/envtest","continuous":true,"stdInData":true,"x":360,"y":300,"wires":[["c91743dc40187954","json_node"]]},{"id":"317f7a8.2b1ed86","type":"comment","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"inject a number to the python script and display it in the debug window","info":"","x":510,"y":260,"wires":[]},{"id":"file","type":"file","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/debug/debug-solar_system_planets.log","filenameType":"str","appendNewline":true,"createDir":false,"overwriteFile":"false","encoding":"none","x":1050,"y":260,"wires":[["e757b049.aa745"]]},{"id":"c91743dc40187954","type":"function","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"horodatage","func":"const moment = global.get('moment');\nlet date = moment().tz(\"Europe/Paris\").format('DD/MM/YYYY, HH:mm:ss');\nmsg.payload = date + \"\\n\" + msg.payload;\nreturn msg;\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":300,"wires":[["file"]]},{"id":"f4319015.f829c","type":"inject","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":160,"wires":[["b8d5a5ee.27a048","fb10468dd878168c","24a721c0b9ad9c4e","cfa95ff79a094e3e","25bf1ea2489cf7a9"]]},{"id":"b8d5a5ee.27a048","type":"template","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"solar_system_planets.py","field":"payload","fieldType":"msg","format":"python","syntax":"plain","template":"import astronomy\nimport time\nimport json\n\n# Obtenir la date actuelle\ndate = astronomy.Time.Now()\n\n# Définir l'observateur à Cherbourg\nobserver = astronomy.Observer(latitude=49.64, longitude=-1.62, height=0)\n\n# Liste des planètes\nplanets = [astronomy.Body.Mercury, astronomy.Body.Venus, astronomy.Body.Mars, \n           astronomy.Body.Jupiter, astronomy.Body.Saturn, astronomy.Body.Uranus, \n           astronomy.Body.Neptune, astronomy.Body.Pluto]\n\ndef publish_planet_data():\n    planet_data = {}\n    for planet in planets:\n        try:\n            # Calculer les coordonnées équatoriales\n            equatorial = astronomy.Equator(planet, date, observer=observer, ofdate=True, aberration=True)\n            \n            # Calculer l'élongation par rapport au Soleil\n            elongation_event = astronomy.Elongation(planet, date)\n            \n            # Calculer l'illumination\n            illumination = astronomy.Illumination(planet, date)\n            \n            # Calculer la constellation\n            constellation = astronomy.Constellation(equatorial.ra, equatorial.dec)\n            \n            # Calculer l'altitude et l'azimut\n            horizon = astronomy.Horizon(date, observer, equatorial.ra, equatorial.dec, refraction=astronomy.Refraction.Normal)\n            \n            # Trouver les heures de lever et de coucher\n            rise = astronomy.SearchRiseSet(planet, observer, astronomy.Direction.Rise, date, 1, 0)\n            set = astronomy.SearchRiseSet(planet, observer, astronomy.Direction.Set, date, 1, 0)\n            \n            # Calculer la conjonction inférieure pour Mercure et Vénus\n            if planet in [astronomy.Body.Mercury, astronomy.Body.Venus]:\n                inferior_conjunction = astronomy.SearchRelativeLongitude(planet, 0.0, date)\n                conjunction_type = \"Conjonction inférieure\"\n            else:\n                # Calculer l'opposition pour les autres planètes\n                opposition = astronomy.SearchRelativeLongitude(planet, 180.0, date)\n                conjunction_type = \"Opposition\"\n            \n            # Calculer la conjonction supérieure pour toutes les planètes\n            superior_conjunction = astronomy.SearchRelativeLongitude(planet, 0.0, date)\n            \n            # Calculer le périhélie et l'aphélie\n            apsis = astronomy.SearchPlanetApsis(planet, date)\n            apsis2 = astronomy.NextPlanetApsis(planet, apsis)\n\n            if apsis.dist_au > apsis2.dist_au:\n                aphelion = apsis.time\n                perihelion = apsis2.time\n            else:\n                aphelion = apsis2.time\n                perihelion = apsis.time\n            \n            # Calculer l'altitude et l'azimut avec les conditions atmosphériques\n            alt, az, distance = horizon.altitude, horizon.azimuth, equatorial.dist         \n\n            state = \"ON\" if horizon.altitude > 0 else \"OFF\"\n            \n            # Ajouter les données de la planète\n            planet_data[planet.name.lower()] = {\n                \"right_ascension\": equatorial.ra,\n                \"declination\": equatorial.dec,\n                \"distance_au\": equatorial.dist,\n                \"elongation_degrees\": elongation_event.elongation,\n                \"magnitude_apparente\": illumination.mag,\n                \"phase_angle\": illumination.phase_angle,\n                \"constellation\": constellation.name,\n                \"altitude_degrees\": alt,\n                \"azimuth_degrees\": az,\n                \"heure_de_lever\": str(rise),\n                \"heure_de_coucher\": str(set),\n                \"conjunction_type\": str(inferior_conjunction if planet in [astronomy.Body.Mercury, astronomy.Body.Venus] else opposition),\n                \"conjonction_superieure\": str(superior_conjunction),\n                \"perihelie\": str(perihelion),\n                \"aphelie\": str(aphelion),\n                \"state\": state\n            }\n        except Exception as e:\n            print(f\"Error processing data for {planet.name}: {e}\")\n    \n    return planet_data\n\nwhile True:\n    planet_data = publish_planet_data()\n    print(json.dumps(planet_data))  # Imprimer les données sous forme de chaîne JSON\n    time.sleep(60)  # Attendre 60 secondes avant de répéter\n","output":"str","x":370,"y":100,"wires":[["ba14283e.921b28"]]},{"id":"13717224.4e8bfe","type":"comment","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"create a python script file and save to disk","info":"","x":420,"y":60,"wires":[]},{"id":"ba14283e.921b28","type":"file","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"solar_system_planets.py","filename":"/data/astronomy/scripts/solar_system_planets.py","filenameType":"str","appendNewline":true,"createDir":true,"overwriteFile":"true","encoding":"none","x":650,"y":100,"wires":[["5ea9a3129c24da52"]]},{"id":"1adc9f30cd79624c","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Mercury","entityConfig":"1aab1b13ea2b1de0","version":0,"state":"payload.mercury.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.mercury.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.mercury.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.mercury.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.mercury.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.mercury.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.mercury.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.mercury.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.mercury.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.mercury.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.mercury.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.mercury.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.mercury.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.mercury.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.mercury.perihelie","valueType":"msg"},{"property":"perihelie","value":"payload.mercury.perihelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1040,"y":300,"wires":[[]]},{"id":"switch_node","type":"switch","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","property":"payload","propertyType":"msg","rules":[{"t":"hask","v":"mercury","vt":"str"},{"t":"hask","v":"venus","vt":"str"},{"t":"hask","v":"mars","vt":"str"},{"t":"hask","v":"jupiter","vt":"str"},{"t":"hask","v":"saturn","vt":"str"},{"t":"hask","v":"uranus","vt":"str"},{"t":"hask","v":"neptune","vt":"str"},{"t":"hask","v":"pluto","vt":"str"}],"checkall":"true","repair":false,"outputs":8,"x":780,"y":440,"wires":[["1adc9f30cd79624c"],["6abbf520d9268c41"],["9fa4c351263be4aa"],["10dbcc2faf87dbb8"],["e27128bec86720d2"],["ecd82f95ac87f924"],["3b2c1423ea4039cc"],["a121e87126cce329"]]},{"id":"json_node","type":"json","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Parse JSON","property":"payload","action":"obj","pretty":false,"x":610,"y":440,"wires":[["switch_node"]]},{"id":"6abbf520d9268c41","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Venus","entityConfig":"0e32b8e1381271a5","version":0,"state":"payload.venus.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.venus.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.venus.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.venus.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.venus.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.venus.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.venus.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.venus.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.venus.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.venus.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.venus.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.venus.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.venus.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.venus.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.venus.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.venus.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1030,"y":340,"wires":[[]]},{"id":"10dbcc2faf87dbb8","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Jupiter","entityConfig":"5a51ee6668e578c2","version":0,"state":"payload.jupiter.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.jupiter.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.jupiter.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.jupiter.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.jupiter.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.jupiter.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.jupiter.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.jupiter.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.jupiter.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.jupiter.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.jupiter.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.jupiter.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.jupiter.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.jupiter.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.jupiter.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.jupiter.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1040,"y":420,"wires":[[]]},{"id":"9fa4c351263be4aa","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Mars","entityConfig":"9f283d37ebf98e58","version":0,"state":"payload.mars.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.mars.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.mars.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.mars.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.mars.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.mars.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.mars.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.mars.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.mars.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.mars.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.mars.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.mars.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.mars.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.mars.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.mars.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.mars.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1030,"y":380,"wires":[["f072473a64f0a589"]]},{"id":"e27128bec86720d2","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Saturn","entityConfig":"58618726e1c09239","version":0,"state":"payload.saturn.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.saturn.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.saturn.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.saturn.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.saturn.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.saturn.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.saturn.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.saturn.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.saturn.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.saturn.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.saturn.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.saturn.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.saturn.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.saturn.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.saturn.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.saturn.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1040,"y":460,"wires":[[]]},{"id":"ecd82f95ac87f924","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Uranus","entityConfig":"abe1ac529ed6ad50","version":0,"state":"payload.uranus.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.uranus.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.uranus.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.uranus.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.uranus.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.uranus.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.uranus.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.uranus.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.uranus.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.uranus.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.uranus.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.uranus.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.uranus.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.uranus.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.uranus.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.uranus.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1040,"y":500,"wires":[[]]},{"id":"3b2c1423ea4039cc","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Neptune","entityConfig":"a4a66434a4b6efee","version":0,"state":"payload.neptune.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.neptune.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.neptune.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.neptune.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.neptune.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.neptune.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.neptune.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.neptune.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.neptune.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.neptune.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.neptune.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.neptune.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.neptune.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.neptune.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.neptune.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.neptune.aphelie","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":1040,"y":540,"wires":[[]]},{"id":"a121e87126cce329","type":"ha-binary-sensor","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"Planet Pluto","entityConfig":"1625522b875eb3b4","version":0,"state":"payload.pluto.state","stateType":"msg","attributes":[{"property":"Right ascension","value":"payload.pluto.right_ascension","valueType":"msg"},{"property":"Declination","value":"payload.pluto.declination","valueType":"msg"},{"property":"Distance AU","value":"payload.pluto.distance_au","valueType":"msg"},{"property":"elongation_degrees","value":"payload.pluto.elongation_degrees","valueType":"msg"},{"property":"magnitude_apparente","value":"payload.pluto.magnitude_apparente","valueType":"msg"},{"property":"phase_angle","value":"payload.pluto.phase_angle","valueType":"msg"},{"property":"constellation","value":"payload.pluto.constellation","valueType":"msg"},{"property":"altitude_degrees","value":"payload.pluto.altitude_degrees","valueType":"msg"},{"property":"azimuth_degrees","value":"payload.pluto.azimuth_degrees","valueType":"msg"},{"property":"heure_de_lever","value":"payload.pluto.heure_de_lever","valueType":"msg"},{"property":"heure_de_coucher","value":"payload.pluto.heure_de_coucher","valueType":"msg"},{"property":"conjunction_type","value":"payload.pluto.conjunction_type","valueType":"msg"},{"property":"conjonction_superieure","value":"payload.pluto.conjonction_superieure","valueType":"msg"},{"property":"perihelie","value":"payload.pluto.perihelie","valueType":"msg"},{"property":"aphelie","value":"payload.pluto.aphelie","valueType":"str"}],"inputOverride":"allow","outputProperties":[],"x":1030,"y":580,"wires":[[]]},{"id":"0364acf45d5e0ce9","type":"template","z":"a6398238.dbb24","d":true,"g":"fa64c4d43da69405","name":"img_venus_phase.py","field":"payload","fieldType":"msg","format":"python","syntax":"mustache","template":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated Aug 2024\n@ author: David ALBERTO (www.astrolabe-science.fr)\n\nThis script draws the aspect of the Venus disc (phase) for a given date,\nand the heliocentric positions of Earth and Venus.\nDisplays percent of disc illuminated and phase angle of Venus.\nThe phase angle is the angle which vertex is the observed planet,\n not the earth.\n\"\"\"\n# calling libraries :\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n# import datetime as dt\nfrom datetime import datetime, timedelta\nimport numpy as np\nfrom skyfield.api import load, utc\nfrom skyfield.framelib import ecliptic_frame\nimport locale\n# locale.setlocale(locale.LC_ALL,'en_US.UTF-8')  # language for month name\nlocale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')  # language for month name\n\n# Customized settings : ----------------------------\nplt.rcParams[\"font.family\"] = \"Arial\" # or other local font\nplt.rcParams[\"font.size\"] = 8\nplt.rcParams['scatter.edgecolors'] = 'black'\nplanet_color = 'tan'\nbackground_color = '#282624' #Fluent Orange Theme (card-background-color: \"rgb(40,38,36)\" / https://github.com/Madelena/Metrology-for-Hass/blob/main/themes/metro.yaml)\nplanet_name = 'venus'  # named reckoned by the Skyfield library\n#  'mercury', 'venus', 'mars'\ndelay = 0 # number of days after 2024/1/1\ndate = datetime.now() + timedelta(days=delay)\nfile_name = 'venus_phase' + str(delay)\n# ---------------------------------------------------\n\nts = load.timescale()\n\"\"\"\nThe ephemerides file has to be downloaded once, then loaded from its local folder.\n\"\"\"\neph = load('de421.bsp')  # loaded from the folder\n#eph = load('../skyfield-ephemerides/de421.bsp')  # download\nsun, earth = eph['sun'], eph['earth']\nplanet = eph['venus']\n# ---------------------------------------------------\n#  ------------------- FUNCTIONS --------------------\n\ndef phase_angle(t):\n    \"\"\"\n    Parameters\n    ----------\n    t : TYPE        : Skyfield date\n    Returns the phase angle in degrees and percent illuminated\n    -------\n    \"\"\"\n    sun_position = planet.at(t).observe(sun)\n    earth_position = planet.at(t).observe(earth)\n    phase_angle_deg = sun_position.separation_from(earth_position).degrees\n    phase_angle_rad = (np.radians(phase_angle_deg))\n    f = 50 * (1 + np.cos(phase_angle_rad))  # percent illuminated\n    return phase_angle_deg, f\n\ndef lightside():\n    \"\"\"\n    calculates geocentric longitudes of the Sun and the planet, and\n    finds from which side the planet is illuminated :\n        returns True if sunlight comes from the left, False otherwise.\n    \"\"\"\n    lat, lon_sun, distance = earth.at(t).observe(sun).frame_latlon(ecliptic_frame)\n    lat, lon_planet, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    long_diff = (lon_sun.degrees - lon_planet.degrees)  # difference in geocentric longitude\n    if long_diff > 180:\n        long_diff = long_diff - 360\n    elif long_diff < -180:\n        long_diff = long_diff + 360\n    if long_diff < 0:\n        left = False\n    else:\n        left = True\n    return left\n\ndef radius(t):\n    \"\"\"\n    calculates the planet's radius as seen from Earth,\n    from its distance.\n    Returns normalized radius (float).\n    \"\"\"\n    lat, lon, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    distance = distance.au\n    radius = 0.25/distance\n    return radius\n    \n# --------------------------------------\ndef disk(p, phase, axe):\n    \"\"\"\n    Parameters\n    ----------\n    p : TYPE float\n        DESCRIPTION : percent illuminated (0-100)\n    phase : phase angle (0 - 180°)\n    ax : ax \n    Draws the aspect of the planetary disc\n    \"\"\"\n    R = radius(t)\n    b = R * (np.cos(np.radians(phase))) # half small axis of the terminator's ellipse\n    limb = patches.Circle((0,0),R,facecolor=planet_color,edgecolor='k',zorder=0,\n                           linewidth=0.5)\n    axe.add_patch(limb)  # edge of the disc, for a white background\n    if lightside():\n        black_half = patches.Wedge((0,0), R, -90, 90, color='k',ec='None')\n    else:\n        black_half = patches.Wedge((0,0), R, 90, 270, color='k',ec='None')\n    axe.add_patch(black_half)\n\n    if phase >= 0 and phase < 90:\n        ellipse_color = planet_color\n    else:\n        ellipse_color = 'black'\n    ellipse = patches.Ellipse((0,0), 2 * b, 2 * R,color = ellipse_color,lw=0)\n    axe.add_patch(ellipse)\n\n    # display data :\n    axe.text(0.98,0.98,f'{round(p,2)} %',ha='right',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.02,0.98,f'phase angle: {round(phase,1)}°',ha='left',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.5,0.02,date.strftime('%d %b %Y'),ha='center',va='bottom',fontsize=10,\n             c = 'white', transform=axe.transAxes)\n\n#  end of functions--------------\n\n#  Setting figure and axes :\n\nfig = plt.figure()\nax1 = plt.subplot(121)  # left axe\nax1.set(\n    aspect = 'equal',\n    xlim = (-1,1),\n    ylim = (-1,1),\n    xticks = ([]),\n    yticks = ([]),\n    facecolor = background_color,\n            )\n    \ndate = date.replace(tzinfo=utc) # declaring timezone info before conversion\nt = ts.from_datetime(date) # conversion to a Skyfield date\nphase, f = phase_angle(t)\ndisk(f, phase, ax1)\n\n\nfig.savefig(file_name + '.png', dpi=300, bbox_inches='tight', pad_inches=0)\n\n","output":"str","x":1380,"y":100,"wires":[[]]},{"id":"574649e5db73966c","type":"file","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_phases.py","filename":"/data/astronomy/scripts/img_planets_phases.py","filenameType":"str","appendNewline":true,"createDir":false,"overwriteFile":"true","encoding":"none","x":650,"y":140,"wires":[["5ea9a3129c24da52"]]},{"id":"d92a85a5d1200b50","type":"pythonshell in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_phases.py","pyfile":"/data/astronomy/scripts/img_planets_phases.py","virtualenv":"/data/envtest","continuous":true,"stdInData":true,"x":370,"y":340,"wires":[[]]},{"id":"c90f11e073f10b5a","type":"delay","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":120,"y":720,"wires":[["440a858da18af230","0cb93ad635811017","4dbc420358c193ab","f015157c3da66b11","676cd6086c0ec32c","dba85612309bd765","7258a8ce405742b3","4bb27edef8bfecf6","35c1a417b81a3c9b","7dd25af803822f0e","35a8db32a1c13f06","58fb5439de28fabd","433ba7226d352be4","2f6a97785708f602","55abb6e4f593e0c3"]]},{"id":"440a858da18af230","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/venus_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":450,"y":720,"wires":[["275370b37f3e4d5f"]]},{"id":"275370b37f3e4d5f","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img venus phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":720,"wires":[]},{"id":"cd7bbc8133e2800e","type":"template","z":"a6398238.dbb24","d":true,"g":"fa64c4d43da69405","name":"img_venus_position.py","field":"payload","fieldType":"msg","format":"python","syntax":"mustache","template":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated Aug 2024\n@ author: David ALBERTO (www.astrolabe-science.fr)\n\nThis script draws the aspect of the Venus disc (phase) for a given date,\nand the heliocentric positions of Earth and Venus.\nDisplays percent of disc illuminated and phase angle of Venus.\nThe phase angle is the angle which vertex is the observed planet,\n not the earth.\n\"\"\"\n# calling libraries :\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n# import datetime as dt\nfrom datetime import datetime, timedelta\nimport numpy as np\nfrom skyfield.api import load, utc\nfrom skyfield.framelib import ecliptic_frame\nimport locale\n# locale.setlocale(locale.LC_ALL,'en_US.UTF-8')  # language for month name\nlocale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')  # language for month name\n\n# Customized settings : ----------------------------\nplt.rcParams[\"font.family\"] = \"Arial\" # or other local font\nplt.rcParams[\"font.size\"] = 8\nplt.rcParams['scatter.edgecolors'] = '#464039'\nplanet_color = 'tan'\nbackground_color = '#282624' #Fluent Orange Theme (card-background-color: \"rgb(40,38,36)\" / https://github.com/Madelena/Metrology-for-Hass/blob/main/themes/metro.yaml)\nplanet_name = 'venus'  # named reckoned by the Skyfield library\n#  'mercury', 'venus', 'mars'\ndelay = 0 # number of days after 2024/1/1\ndate = datetime.now() + timedelta(days=delay)\nfile_name = 'venus_position' + str(delay)\n# ---------------------------------------------------\n\nts = load.timescale()\n\"\"\"\nThe ephemerides file has to be downloaded once, then loaded from its local folder.\n\"\"\"\neph = load('de421.bsp')  # loaded from the folder\n#eph = load('../skyfield-ephemerides/de421.bsp')  # download\nsun, earth = eph['sun'], eph['earth']\nplanet = eph['venus']\n# ---------------------------------------------------\n#  ------------------- FUNCTIONS --------------------\n\ndef phase_angle(t):\n    \"\"\"\n    Parameters\n    ----------\n    t : TYPE        : Skyfield date\n    Returns the phase angle in degrees and percent illuminated\n    -------\n    \"\"\"\n    sun_position = planet.at(t).observe(sun)\n    earth_position = planet.at(t).observe(earth)\n    phase_angle_deg = sun_position.separation_from(earth_position).degrees\n    phase_angle_rad = (np.radians(phase_angle_deg))\n    f = 50 * (1 + np.cos(phase_angle_rad))  # percent illuminated\n    return phase_angle_deg, f\n\ndef helio_coordinates(planet, t):\n    \"\"\"\n    planet : Skyfield celestial body\n    date : date ou série de dates Skyfield\n    returns heliocentric longitude in radians, and distance from the Sun (au)\n    \"\"\"\n    lat, lon, distance = sun.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    lon = lon.radians\n    distance = distance.au\n    return lon, distance\n    \ndef lightside():\n    \"\"\"\n    calculates geocentric longitudes of the Sun and the planet, and\n    finds from which side the planet is illuminated :\n        returns True if sunlight comes from the left, False otherwise.\n    \"\"\"\n    lat, lon_sun, distance = earth.at(t).observe(sun).frame_latlon(ecliptic_frame)\n    lat, lon_planet, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    long_diff = (lon_sun.degrees - lon_planet.degrees)  # difference in geocentric longitude\n    if long_diff > 180:\n        long_diff = long_diff - 360\n    elif long_diff < -180:\n        long_diff = long_diff + 360\n    if long_diff < 0:\n        left = False\n    else:\n        left = True\n    # printing controls:\n    # print(lon_sun.degrees)\n    # print(lon_planet.degrees)\n    # print(long_diff)\n    # print('left ? :', left)\n    return left\n\ndef radius(t):\n    \"\"\"\n    calculates the planet's radius as seen from Earth,\n    from its distance.\n    Returns normalized radius (float).\n    \"\"\"\n    lat, lon, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    distance = distance.au\n    radius = 0.25/distance\n    return radius\n    \n# --------------------------------------\ndef disk(p, phase, axe):\n    \"\"\"\n    Parameters\n    ----------\n    p : TYPE float\n        DESCRIPTION : percent illuminated (0-100)\n    phase : phase angle (0 - 180°)\n    ax : ax \n    Draws the aspect of the planetary disc\n    \"\"\"\n    R = radius(t)\n    b = R * (np.cos(np.radians(phase))) # half small axis of the terminator's ellipse\n    limb = patches.Circle((0,0),R,facecolor='white',edgecolor='k',zorder=0,\n                           linewidth=0.5)  # Change facecolor to 'white'\n    axe.add_patch(limb)  # edge of the disc, for a white background\n    if lightside():\n        black_half = patches.Wedge((0,0), R, -90, 90, color='k',ec='None')\n    else:\n        black_half = patches.Wedge((0,0), R, 90, 270, color='k',ec='None')\n    axe.add_patch(black_half)\n\n    if phase >= 0 and phase < 90:\n        ellipse_color = planet_color\n    else:\n        ellipse_color = '#464039'\n    ellipse = patches.Ellipse((0,0), 2 * b, 2 * R,color = ellipse_color,lw=0)\n    axe.add_patch(ellipse)\n\n    # display data :\n    axe.text(0.98,0.98,f'{round(p,2)} %',ha='right',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.02,0.98,f'phase angle: {round(phase,1)}°',ha='left',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.5,0.02,date.strftime('%d %b %Y'),ha='center',va='bottom',fontsize=10,\n             c = 'white', transform=axe.transAxes)\n\n\n#  end of functions--------------\n\n#  Setting figure and axes :\n\nfig = plt.figure()\nfig.patch.set_facecolor(background_color)\n# ax1 = plt.subplot(121)  # left axe\n# ax1.set(\n#     aspect = 'equal',\n#     xlim = (-1,1),\n#     ylim = (-1,1),\n#     xticks = ([]),\n#     yticks = ([]),\n#     facecolor = background_color,\n#             )\n    \ndate = date.replace(tzinfo=utc) # declaring timezone info before conversion\nt = ts.from_datetime(date) # conversion to a Skyfield date\nphase, f = phase_angle(t)\n# disk(f, phase, ax1)\n\nax2 = plt.subplot(122, projection='polar')  # right plot\nax2.set(\n        xticks = ([]),\n        yticks = ([]),\n        facecolor = background_color,\n        )\nax2.spines['polar'].set_color('#464039')  # Set the color of the outer circle\n\nx_earth, y_earth = helio_coordinates(earth, t)\nx_planet, y_planet = helio_coordinates(planet, t)\n\n#  plotting the sun & planets\nax2.plot([0,x_earth],[0, y_earth], c='#464039', lw=0.7)\nax2.plot([0,x_planet],[0, y_planet], c='#464039', lw=0.7)\nax2.plot([x_planet,x_earth],[y_planet, y_earth], c='#464039', lw=0.7)\n\nax2.scatter(0, 0, c='gold', s=100, zorder=2)\nax2.scatter(x_earth, y_earth, label='Terre', c='royalblue', zorder=2)\nax2.scatter(x_planet, y_planet, label='Venus', c=planet_color, zorder=2)\n\nplt.legend(loc=1, facecolor='#908c88', edgecolor='#1b1a18', labelcolor='#1b1a18')\n\nfig.savefig(file_name + '.png', dpi=300, bbox_inches='tight', pad_inches=0.05)\n","output":"str","x":1380,"y":140,"wires":[[]]},{"id":"ac1ff67a26678ad8","type":"file","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_positions.py","filename":"/data/astronomy/scripts/img_planets_positions.py","filenameType":"str","appendNewline":true,"createDir":false,"overwriteFile":"true","encoding":"none","x":650,"y":180,"wires":[["5ea9a3129c24da52"]]},{"id":"2d6f2558d4fc7e25","type":"image","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","width":160,"data":"payload","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":900,"y":1320,"wires":[]},{"id":"0527a6c8f6dd719c","type":"pythonshell in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_positions.py","pyfile":"/data/astronomy/scripts/img_planets_positions.py","virtualenv":"/data/envtest","continuous":true,"stdInData":true,"x":370,"y":380,"wires":[[]]},{"id":"0cb93ad635811017","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/venus_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":450,"y":1000,"wires":[["57aceb58e76bef05"]]},{"id":"57aceb58e76bef05","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img venus position","config":"{\"content_type\":\"image/png\"}","x":830,"y":1000,"wires":[]},{"id":"f072473a64f0a589","type":"debug","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1240,"y":380,"wires":[]},{"id":"fb10468dd878168c","type":"template","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_phases.py","field":"payload","fieldType":"msg","format":"python","syntax":"mustache","template":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated Aug 2024\n@ author: David ALBERTO (www.astrolabe-science.fr)\n\nThis script draws the aspect of the planetary discs (phases) for a given date,\nand the heliocentric positions of Earth, Venus, Mercury, and Mars.\nDisplays percent of disc illuminated and phase angle of each planet.\nThe phase angle is the angle which vertex is the observed planet,\n not the earth.\n\"\"\"\n# calling libraries :\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n# import datetime as dt\nfrom datetime import datetime, timedelta\nimport numpy as np\nfrom skyfield.api import load, utc\nfrom skyfield.framelib import ecliptic_frame\nimport locale\nimport matplotlib.font_manager as fm\nfont_paths = fm.findSystemFonts(fontpaths=None, fontext='ttf')\nif font_paths:\n    plt.rcParams[\"font.family\"] = fm.FontProperties(fname=font_paths[0]).get_name()\nelse:\n    plt.rcParams[\"font.family\"] = \"DejaVu Sans\"\n# locale.setlocale(locale.LC_ALL,'en_US.UTF-8')  # language for month name\nlocale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')  # language for month name\n\n# Customized settings : ----------------------------\nplt.rcParams[\"font.family\"] = \"Arial\" # or other local font\nplt.rcParams[\"font.size\"] = 8\nplt.rcParams['scatter.edgecolors'] = 'black'\nplanet_colors = {'mercury': 'gray', 'venus': 'tan', 'earth': 'royalblue', 'mars': 'orangered', 'jupiter barycenter':'orange', 'saturn barycenter':'goldenrod', 'uranus barycenter' : 'skyblue', 'neptune barycenter' : 'mediumblue'}\nbackground_color = '#282624' #Fluent Orange Theme (card-background-color: \"rgb(40,38,36)\" / https://github.com/Madelena/Metrology-for-Hass/blob/main/themes/metro.yaml)\nplanet_names = ['mercury', 'venus', 'mars', 'jupiter barycenter', 'saturn barycenter', 'uranus barycenter', 'neptune barycenter']  # named reckoned by the Skyfield library\ndelay = 0 # number of days after 2024/1/1\ndate = datetime.now() + timedelta(days=delay)\n# ---------------------------------------------------\n\nts = load.timescale()\n\"\"\"\nThe ephemerides file has to be downloaded once, then loaded from its local folder.\n\"\"\"\neph = load('de421.bsp')  # loaded from the folder\n#eph = load('../skyfield-ephemerides/de421.bsp')  # download\nsun, earth = eph['sun'], eph['earth']\nplanets = {name: eph[name] for name in planet_names}\n# ---------------------------------------------------\n#  ------------------- FUNCTIONS --------------------\n\ndef phase_angle(t, planet):\n    \"\"\"\n    Parameters\n    ----------\n    t : TYPE        : Skyfield date\n    planet : Skyfield celestial body\n    Returns the phase angle in degrees and percent illuminated\n    -------\n    \"\"\"\n    sun_position = planet.at(t).observe(sun)\n    earth_position = planet.at(t).observe(earth)\n    phase_angle_deg = sun_position.separation_from(earth_position).degrees\n    phase_angle_rad = (np.radians(phase_angle_deg))\n    f = 50 * (1 + np.cos(phase_angle_rad))  # percent illuminated\n    return phase_angle_deg, f\n\ndef lightside(planet):\n    \"\"\"\n    calculates geocentric longitudes of the Sun and the planet, and\n    finds from which side the planet is illuminated :\n        returns True if sunlight comes from the left, False otherwise.\n    \"\"\"\n    lat, lon_sun, distance = earth.at(t).observe(sun).frame_latlon(ecliptic_frame)\n    lat, lon_planet, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    long_diff = (lon_sun.degrees - lon_planet.degrees)  # difference in geocentric longitude\n    if long_diff > 180:\n        long_diff = long_diff - 360\n    elif long_diff < -180:\n        long_diff = long_diff + 360\n    if long_diff < 0:\n        left = False\n    else:\n        left = True\n    return left\n\ndef radius(t, planet):\n    \"\"\"\n    calculates the planet's radius as seen from Earth,\n    from its distance.\n    Returns normalized radius (float).\n    \"\"\"\n    lat, lon, distance = earth.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    distance = distance.au\n    radius = 0.25/distance\n    return radius\n    \n# --------------------------------------\ndef disk(p, phase, axe, planet, color):\n    \"\"\"\n    Parameters\n    ----------\n    p : TYPE float\n        DESCRIPTION : percent illuminated (0-100)\n    phase : phase angle (0 - 180°)\n    ax : ax \n    Draws the aspect of the planetary disc\n    \"\"\"\n    R = radius(t, planet)\n    b = R * (np.cos(np.radians(phase))) # half small axis of the terminator's ellipse\n    limb = patches.Circle((0,0),R,facecolor=color,edgecolor='k',zorder=0,\n                           linewidth=0.5)\n    axe.add_patch(limb)  # edge of the disc, for a white background\n    if lightside(planet):\n        black_half = patches.Wedge((0,0), R, -90, 90, color='k',ec='None')\n    else:\n        black_half = patches.Wedge((0,0), R, 90, 270, color='k',ec='None')\n    axe.add_patch(black_half)\n\n    if phase >= 0 and phase < 90:\n        ellipse_color = color\n    else:\n        ellipse_color = 'black'\n    ellipse = patches.Ellipse((0,0), 2 * b, 2 * R,color = ellipse_color,lw=0)\n    axe.add_patch(ellipse)\n\n    # display data :\n    axe.text(0.98,0.98,f'{round(p,2)} %',ha='right',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.02,0.98,f'phase angle: {round(phase,1)}°',ha='left',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.5,0.02,date.strftime('%d %b %Y'),ha='center',va='bottom',fontsize=10,\n             c = 'white', transform=axe.transAxes)\n\n#  end of functions--------------\n\n#  Setting figure and axes :\n\nfor planet_name in planet_names:\n    fig, ax = plt.subplots(figsize=(5, 5))  # one axe for each planet\n    ax.set(\n        aspect = 'equal',\n        xlim = (-1,1),\n        ylim = (-1,1),\n        xticks = ([]),\n        yticks = ([]),\n        facecolor = background_color,\n    )\n    \n    date = date.replace(tzinfo=utc) # declaring timezone info before conversion\n    t = ts.from_datetime(date) # conversion to a Skyfield date\n    planet = planets[planet_name]\n    phase, f = phase_angle(t, planet)\n    disk(f, phase, ax, planet, planet_colors[planet_name])\n\n    fig.savefig('/data/astronomy/images/' + f'{planet_name}_phase.png', dpi=300, bbox_inches='tight', pad_inches=0)\n","output":"str","x":370,"y":140,"wires":[["574649e5db73966c"]]},{"id":"4dbc420358c193ab","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/mercury_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":450,"y":680,"wires":[["6d5ac73a066a1311"]]},{"id":"6d5ac73a066a1311","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img mercury phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":680,"wires":[]},{"id":"f015157c3da66b11","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/mars_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":440,"y":760,"wires":[["25ecd73f7ed2eb47"]]},{"id":"25ecd73f7ed2eb47","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img mars phase","config":"{\"content_type\":\"image/png\"}","x":820,"y":760,"wires":[]},{"id":"24a721c0b9ad9c4e","type":"template","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_planets_positions.py","field":"payload","fieldType":"msg","format":"python","syntax":"mustache","template":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated Aug 2024\n@ author: David ALBERTO (www.astrolabe-science.fr)\n\nThis script draws the heliocentric positions of Earth and the planets (Mercury, Venus, Mars)\nfor a given date.\n\"\"\"\n# calling libraries :\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n# import datetime as dt\nfrom datetime import datetime, timedelta\nimport numpy as np\nfrom skyfield.api import load, utc\nfrom skyfield.framelib import ecliptic_frame\nimport locale\nimport matplotlib.font_manager as fm\nfont_paths = fm.findSystemFonts(fontpaths=None, fontext='ttf')\nif font_paths:\n    plt.rcParams[\"font.family\"] = fm.FontProperties(fname=font_paths[0]).get_name()\nelse:\n    plt.rcParams[\"font.family\"] = \"DejaVu Sans\"\n# locale.setlocale(locale.LC_ALL,'en_US.UTF-8')  # language for month name\nlocale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')  # language for month name\n\n# Customized settings : ----------------------------\nplt.rcParams[\"font.family\"] = \"Arial\" # or other local font\nplt.rcParams[\"font.size\"] = 8\nplt.rcParams['scatter.edgecolors'] = '#464039'\nbackground_color = '#282624' #Fluent Orange Theme (card-background-color: \"rgb(40,38,36)\" / https://github.com/Madelena/Metrology-for-Hass/blob/main/themes/metro.yaml)\nplanet_colors = {'mercury': 'gray', 'venus': 'tan', 'earth': 'royalblue', 'mars': 'orangered', 'jupiter barycenter':'orange', 'saturn barycenter':'goldenrod', 'uranus barycenter' : 'skyblue', 'neptune barycenter' : 'mediumblue'}\nplanet_names = ['mercury', 'venus', 'mars', 'jupiter barycenter', 'saturn barycenter', 'uranus barycenter', 'neptune barycenter']  # named reckoned by the Skyfield library\ndelay = 0 # number of days after 2024/1/1\ndate = datetime.now() + timedelta(days=delay)\n# ---------------------------------------------------\n\nts = load.timescale()\n\"\"\"\nThe ephemerides file has to be downloaded once, then loaded from its local folder.\n\"\"\"\neph = load('de421.bsp')  # loaded from the folder\n#eph = load('../skyfield-ephemerides/de421.bsp')  # download\nsun, earth = eph['sun'], eph['earth']\nplanets = {name: eph[name] for name in planet_names}\n# ---------------------------------------------------\n#  ------------------- FUNCTIONS --------------------\n\ndef helio_coordinates(planet, t):\n    \"\"\"\n    planet : Skyfield celestial body\n    date : date ou série de dates Skyfield\n    returns heliocentric longitude in radians, and distance from the Sun (au)\n    \"\"\"\n    lat, lon, distance = sun.at(t).observe(planet).frame_latlon(ecliptic_frame)\n    lon = lon.radians\n    distance = distance.au\n    return lon, distance\n\n#  end of functions--------------\n\n#  Setting figure and axes :\n\nfor name, planet in planets.items():\n    fig = plt.figure()\n    fig.patch.set_facecolor(background_color)\n\n    date = date.replace(tzinfo=utc) # declaring timezone info before conversion\n    t = ts.from_datetime(date) # conversion to a Skyfield date\n\n    ax2 = plt.subplot(122, projection='polar')  # right plot\n    ax2.set(\n            xticks = ([]),\n            yticks = ([]),\n            facecolor = background_color,\n            )\n    ax2.spines['polar'].set_color('#464039')  # Set the color of the outer circle\n\n    x_earth, y_earth = helio_coordinates(earth, t)\n    x_planet, y_planet = helio_coordinates(planet, t)\n\n    #  plotting the sun & planets\n    ax2.plot([0,x_earth],[0, y_earth], c='#464039', lw=0.7)\n    ax2.plot([0,x_planet],[0, y_planet], c='#464039', lw=0.7)\n    ax2.plot([x_planet,x_earth],[y_planet, y_earth], c='#464039', lw=0.7)\n\n    ax2.scatter(0, 0, c='gold', s=100, zorder=2)\n    ax2.scatter(x_earth, y_earth, label='Terre', c='royalblue', zorder=2)\n    ax2.scatter(x_planet, y_planet, label=name.capitalize(), c=planet_colors[name], zorder=2)\n\n    plt.legend(loc=1, facecolor='#908c88', edgecolor='#1b1a18', labelcolor='#1b1a18')\n\n    fig.savefig('/data/astronomy/images/' + f'{name}_position.png', dpi=300, bbox_inches='tight', pad_inches=0.05)\n","output":"str","x":370,"y":180,"wires":[["ac1ff67a26678ad8"]]},{"id":"dba85612309bd765","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/mercury_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":460,"y":960,"wires":[["2a6ed4dce77c11f0"]]},{"id":"676cd6086c0ec32c","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/mars_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":450,"y":1040,"wires":[["331a7b912191aefe"]]},{"id":"2a6ed4dce77c11f0","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img mercury position","config":"{\"content_type\":\"image/png\"}","x":840,"y":960,"wires":[]},{"id":"331a7b912191aefe","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img mars position","config":"{\"content_type\":\"image/png\"}","x":830,"y":1040,"wires":[]},{"id":"4bb27edef8bfecf6","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/saturn barycenter_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":480,"y":840,"wires":[["82d967bc285fd17e"]]},{"id":"7258a8ce405742b3","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/jupiter barycenter_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":480,"y":800,"wires":[["a464eb4b212cbc0d"]]},{"id":"35c1a417b81a3c9b","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/uranus barycenter_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":480,"y":880,"wires":[["43cc2c8acbf9616a"]]},{"id":"7dd25af803822f0e","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/neptune barycenter_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":490,"y":920,"wires":[["7937a081cd1da2c4"]]},{"id":"82d967bc285fd17e","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img saturn phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":840,"wires":[]},{"id":"a464eb4b212cbc0d","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img jupiter phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":800,"wires":[]},{"id":"43cc2c8acbf9616a","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img uranus phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":880,"wires":[]},{"id":"7937a081cd1da2c4","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img neptune phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":920,"wires":[]},{"id":"58fb5439de28fabd","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/saturn barycenter_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":490,"y":1120,"wires":[["7bfa105943501ace"]]},{"id":"35a8db32a1c13f06","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/jupiter barycenter_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":490,"y":1080,"wires":[["7e2d05ab647b6cf5"]]},{"id":"433ba7226d352be4","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/uranus barycenter_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":490,"y":1160,"wires":[["96ae28d2bbb5458e"]]},{"id":"2f6a97785708f602","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/neptune barycenter_position.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":490,"y":1200,"wires":[["87a2703df8ac6572"]]},{"id":"7bfa105943501ace","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img saturn position","config":"{\"content_type\":\"image/png\"}","x":830,"y":1120,"wires":[]},{"id":"7e2d05ab647b6cf5","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img jupiter position","config":"{\"content_type\":\"image/png\"}","x":830,"y":1080,"wires":[]},{"id":"96ae28d2bbb5458e","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img uranus position","config":"{\"content_type\":\"image/png\"}","x":830,"y":1160,"wires":[]},{"id":"87a2703df8ac6572","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img neptune position","config":"{\"content_type\":\"image/png\"}","x":840,"y":1200,"wires":[]},{"id":"cfa95ff79a094e3e","type":"template","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_moon_phase.py","field":"payload","fieldType":"msg","format":"python","syntax":"mustache","template":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated Aug 2024\n@ author: David ALBERTO (www.astrolabe-science.fr)\n\nCe script trace l'aspect de la Lune vue depuis la Terre, pour une\ndate donnée, ainsi que les positions géocentriques de la Lune et \ndu Soleil à la meme date.\nSont indiqués l'angle de phase de la Lune et le pourcentage\nd'éclairement du disque lunaire vu depuis la Terre.\nL'angle de phase est l'angle entre la direction de la Terre et celle\ndu Soleil, depuis la Lune.\n\"\"\"\n# appel des modules :\nimport os\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\nfrom datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nfrom skyfield.api import load, utc\nfrom skyfield.framelib import ecliptic_frame\nimport locale\nimport matplotlib.font_manager as fm\nfont_paths = fm.findSystemFonts(fontpaths=None, fontext='ttf')\nif font_paths:\n    plt.rcParams[\"font.family\"] = fm.FontProperties(fname=font_paths[0]).get_name()\nelse:\n    plt.rcParams[\"font.family\"] = \"DejaVu Sans\"\n\nlocale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')  # language for month name\n\n# paramètres à personnaliser : ----------------------------\n# plt.rcParams[\"font.family\"] = \"Arial\" # ou autre police installée\nplt.rcParams[\"font.size\"] = 8\nplt.rcParams['scatter.edgecolors'] = 'black'\ncouleur_lune = 'lightgray'\nbackground_color = '#282624'\nlong_fleche = 3.3e5  # longueur de la flèche pointant le Soleil\n# ---------------------------------------------------\n\nts = load.timescale()\n\"\"\"\nLe fichier d'éphémérides doit etre téléchargé une fois, puis chargé\ndepuis son répertoire.\n\"\"\"\neph = load('de421.bsp')  # loaded from the folder\n#eph = load('../skyfield-ephemerides/de421.bsp')  # download\nsun, earth = eph['sun'], eph['earth']\nlune = eph['moon']\n# ---------------------------------------------------\n#  ------------------- FUNCTIONS --------------------\n\ndef phase_angle(t):\n    \"\"\"\n    Parameters\n    ----------\n    t : TYPE        : date Skyfield \n    Returns the phase angle in degrees and percent illuminated\n    -------\n    \"\"\"\n    sun_position = lune.at(t).observe(sun)\n    earth_position = lune.at(t).observe(earth)\n    phase_angle_deg = sun_position.separation_from(earth_position).degrees\n    phase_angle_rad = (np.radians(phase_angle_deg))\n    f = 50 * (1 + np.cos(phase_angle_rad))  # percent illuminated\n    return phase_angle_deg, f\n    \ndef lightside():\n    \"\"\"\n    calculates geocentric longitudes of the Sun and the lune, and\n    finds from which side the lune is illuminated :\n        returns True if sunlight comes from the left, False otherwise.\n    \"\"\"\n    lat, lon_sun, distance = earth.at(t).observe(sun).frame_latlon(ecliptic_frame)\n    lat, lon_lune, distance = earth.at(t).observe(lune).frame_latlon(ecliptic_frame)\n    long_diff = (lon_sun.degrees - lon_lune.degrees)  # difference in geocentric longitude\n    if long_diff > 180:\n        long_diff = long_diff - 360\n    elif long_diff < -180:\n        long_diff = long_diff + 360\n    if long_diff < 0:\n        left = False\n    else:\n        left = True\n    # printing controls:\n    # print(lon_sun.degrees)\n    # print(lon_lune.degrees)\n    # print(long_diff)\n    # print('left ? :', left)\n    return left\n\ndef radius(t):\n    \"\"\"\n    calculates the moon's radius as seen from Earth,\n    from its distance.\n    Returns normalized radius (float).\n    \"\"\"\n    lat, lon, distance = earth.at(t).observe(lune).frame_latlon(ecliptic_frame)\n    distance = distance.au\n    radius = 0.00201/distance\n    return radius\n    \n# --------------------------------------\ndef disk(p, phase, axe):\n    \"\"\"\n    Parameters\n    ----------\n    p : TYPE float\n        DESCRIPTION : percent illuminated (0-100)\n    phase : phase angle (0 - 180°)\n    ax : ax \n    Draws the aspect of the luneary disc\n    \"\"\"\n    R = radius(t)\n    b = R * (np.cos(np.radians(phase))) # half small axis of the terminator's ellipse\n    limb = patches.Circle((0,0),R,facecolor=couleur_lune,edgecolor='k',zorder=0,\n                           linewidth=1)\n    axe.add_patch(limb)  # edge of the disc, for a white background\n    if lightside():\n        black_half = patches.Wedge((0,0), R, -90, 90, color=background_color ,ec='None')\n    else:\n        black_half = patches.Wedge((0,0), R, 90, 270, color=background_color ,ec='None')\n    axe.add_patch(black_half)\n\n    if phase >= 0 and phase < 90:\n        ellipse_color = couleur_lune\n    else:\n        ellipse_color = 'black'\n    ellipse = patches.Ellipse((0,0), 2 * b, 2 * R,color = ellipse_color,lw=0)\n    axe.add_patch(ellipse)\n\n    # display data :\n    axe.text(0.98,0.98,f'{round(p,2)} %',ha='right',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.02,0.98,f'phase angle: {round(phase,1)}°',ha='left',va='top',fontsize=10,\n             c = 'white',\n             transform=axe.transAxes)\n    axe.text(0.5,0.02,date.strftime('%d %b %Y %H:%M:%S'),ha='center',va='bottom',fontsize=10,\n             c = 'white', transform=axe.transAxes)\n\n#  end of functions--------------\n\n#  Setting figure and axes :\n\nfor delay in range(1):\n    fig, ax = plt.subplots(figsize=(5, 5))  # one axe for each planet\n    fig.subplots_adjust(left=0, right=1, top=1, bottom=0)  # Adjust margins to reduce white space\n    ax.set(\n        aspect = 'equal',\n        xlim = (-1,1),\n        ylim = (-1,1),\n        xticks = ([]),\n        yticks = ([]),\n        facecolor = background_color,\n                )\n    date = datetime.now(tz=pytz.timezone(\"Europe/Paris\")) + timedelta(days=delay)   \n    t = ts.from_datetime(date) # conversion to a Skyfield date\n    phase, f = phase_angle(t)\n    disk(f, phase, ax)\n    \n    file_name = 'moon_phase'\n    fig.savefig('/data/astronomy/images/' + file_name + '.png', dpi=300, bbox_inches='tight', pad_inches=0)  # Save figure with tight bounding box\n    # plt.close()","output":"str","x":360,"y":220,"wires":[["2e3b885be183bec8"]]},{"id":"5ea9a3129c24da52","type":"debug","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":910,"y":100,"wires":[]},{"id":"2e3b885be183bec8","type":"file","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_moon_phase.py","filename":"/data/astronomy/scripts/img_moon_phase.py","filenameType":"str","appendNewline":true,"createDir":false,"overwriteFile":"true","encoding":"none","x":640,"y":220,"wires":[["5ea9a3129c24da52"]]},{"id":"ab05f5b269b63239","type":"pythonshell in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"img_moon_phase.py","pyfile":"/data/astronomy/scripts/img_moon_phase.py","virtualenv":"/data/envtest","continuous":true,"stdInData":true,"x":360,"y":420,"wires":[[]]},{"id":"55abb6e4f593e0c3","type":"file in","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","filename":"/data/astronomy/images/moon_phase.png","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":440,"y":1240,"wires":[["f22ac935192c7c97","2d6f2558d4fc7e25"]]},{"id":"f22ac935192c7c97","type":"ha-mqtt-image","z":"a6398238.dbb24","g":"fa64c4d43da69405","server":"2b5fef03b373d0e4","device":"9d66fbbd52c6cc5f","name":"img moon phase","config":"{\"content_type\":\"image/png\"}","x":830,"y":1240,"wires":[]},{"id":"25bf1ea2489cf7a9","type":"delay","z":"a6398238.dbb24","g":"fa64c4d43da69405","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":120,"y":280,"wires":[["9b520682.5cbbe8","d92a85a5d1200b50","0527a6c8f6dd719c","ab05f5b269b63239","c90f11e073f10b5a"]]},{"id":"1aab1b13ea2b1de0","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Mercury","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Mercury"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"0e32b8e1381271a5","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Venus","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Venus"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"5a51ee6668e578c2","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Jupiter","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Jupiter"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"9f283d37ebf98e58","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Mars","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Mars"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"58618726e1c09239","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Saturn","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Saturn"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"abe1ac529ed6ad50","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Uranus","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Uranus"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"a4a66434a4b6efee","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Neptune","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Neptune"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"1625522b875eb3b4","type":"ha-entity-config","server":"a1deeaebd21f3a64","deviceConfig":"f23e8a3c20ea5ef8","name":"Planet Pluto","version":"6","entityType":"binary_sensor","haConfig":[{"property":"name","value":"Pluto"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"2b5fef03b373d0e4","type":"mqtt-broker","name":"","broker":"192.168.1.153","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"9d66fbbd52c6cc5f","type":"ha-mqtt-device","name":"Planet","config":"{}","retain":false},{"id":"a1deeaebd21f3a64","type":"server","name":"Home Assistant","version":5,"addon":false,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":": ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"default","statusTimeFormat":"h:m","enableGlobalContextStore":false},{"id":"f23e8a3c20ea5ef8","type":"ha-device-config","name":"Planet","hwVersion":"","manufacturer":"Node-RED","model":"","swVersion":""}]